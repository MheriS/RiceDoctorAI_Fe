{
    "sourceFile": "src/components/ClassificationResult.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1753252832620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756219749637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,23 +3,59 @@\n import { Badge } from './ui/badge';\r\n import { Progress } from './ui/progress';\r\n import { Alert, AlertDescription } from './ui/alert';\r\n \r\n-interface Disease {\r\n-  name: string;\r\n+// Tambahkan definisi tipe untuk hasil dari API\r\n+interface PredictionResult {\r\n+  prediction: string;\r\n   confidence: number;\r\n-  severity: 'low' | 'medium' | 'high';\r\n+  probabilities: number[];\r\n+  labels: string[];\r\n+}\r\n+\r\n+// Tambahkan definisi tipe untuk data detail yang akan digunakan\r\n+interface DiseaseDetails {\r\n   description: string;\r\n+  symptoms: string[];\r\n   treatment: string;\r\n-  symptoms: string[];\r\n }\r\n \r\n+// Data mock untuk detail penyakit, yang akan digunakan\r\n+// Ini adalah data yang akan melengkapi hasil dari API\r\n+const mockDetails: Record<string, DiseaseDetails> = {\r\n+  'blight': {\r\n+    description: 'Penyakit bakteri yang menyebabkan daun mengering dan menguning dari ujung.',\r\n+    symptoms: ['Garis-garis kuning memanjang', 'Daun mengering', 'Anakan berkurang'],\r\n+    treatment: 'Gunakan varietas tahan dan bakterisida berbahan dasar tembaga.'\r\n+  },\r\n+  'blast': {\r\n+    description: 'Penyakit jamur yang menyebabkan bercak berbentuk belah ketupat pada daun.',\r\n+    symptoms: ['Bercak belah ketupat pada daun', 'Tepi bercak coklat gelap', 'Daun mengering dan mati'],\r\n+    treatment: 'Aplikasi fungisida berbahan aktif tricyclazole.'\r\n+  },\r\n+  'tungro': {\r\n+    description: 'Penyakit virus yang ditularkan wereng hijau, menyebabkan tanaman kerdil.',\r\n+    symptoms: ['Tanaman kerdil', 'Daun kuning-orange', 'Anakan sedikit'],\r\n+    treatment: 'Kendalikan wereng hijau dengan insektisida dan tanam varietas tahan.'\r\n+  },\r\n+  'healthy': {\r\n+    description: 'Tanaman padi dalam kondisi sehat tanpa gejala penyakit.',\r\n+    symptoms: ['Daun hijau segar', 'Pertumbuhan normal', 'Tidak ada bercak'],\r\n+    treatment: 'Pertahankan pemupukan seimbang dan irigasi yang baik.'\r\n+  },\r\n+  'bukan daun padi': {\r\n+    description: 'Gambar yang diunggah tidak terdeteksi sebagai daun padi.',\r\n+    symptoms: [],\r\n+    treatment: 'Pastikan Anda mengunggah gambar daun padi tunggal dengan latar belakang putih bersih.'\r\n+  }\r\n+};\r\n+\r\n interface ClassificationResultProps {\r\n-  disease: Disease | null;\r\n+  predictionResult: PredictionResult | null;\r\n   isLoading: boolean;\r\n }\r\n \r\n-export function ClassificationResult({ disease, isLoading }: ClassificationResultProps) {\r\n+export function ClassificationResult({ predictionResult, isLoading }: ClassificationResultProps) {\r\n   if (isLoading) {\r\n     return (\r\n       <Card>\r\n         <CardHeader>\r\n@@ -37,9 +73,10 @@\n       </Card>\r\n     );\r\n   }\r\n \r\n-  if (!disease) {\r\n+  // Gunakan `predictionResult` yang baru\r\n+  if (!predictionResult) {\r\n     return (\r\n       <Card>\r\n         <CardContent className=\"pt-6\">\r\n           <div className=\"text-center text-muted-foreground\">\r\n@@ -50,19 +87,15 @@\n       </Card>\r\n     );\r\n   }\r\n \r\n-  const getSeverityColor = (severity: string) => {\r\n-    switch (severity) {\r\n-      case 'low': return 'bg-green-500';\r\n-      case 'medium': return 'bg-yellow-500';\r\n-      case 'high': return 'bg-red-500';\r\n-      default: return 'bg-gray-500';\r\n-    }\r\n-  };\r\n+  // Dapatkan detail penyakit dari data mock berdasarkan hasil prediksi\r\n+  const diseaseDetails = mockDetails[predictionResult.prediction as keyof typeof mockDetails];\r\n+  const severity = predictionResult.confidence >= 0.9 ? 'high' : predictionResult.confidence >= 0.8 ? 'medium' : 'low';\r\n+  const confidencePercentage = (predictionResult.confidence * 100).toFixed(2);\r\n \r\n-  const getSeverityIcon = (severity: string) => {\r\n-    switch (severity) {\r\n+  const getSeverityIcon = (sev: string) => {\r\n+    switch (sev) {\r\n       case 'low': return <CheckCircle className=\"h-4 w-4\" />;\r\n       case 'medium': return <Info className=\"h-4 w-4\" />;\r\n       case 'high': return <AlertTriangle className=\"h-4 w-4\" />;\r\n       default: return null;\r\n@@ -75,37 +108,37 @@\n         <CardHeader>\r\n           <CardTitle className=\"flex items-center justify-between\">\r\n             Hasil Klasifikasi\r\n             <Badge \r\n-              variant={disease.severity === 'high' ? 'destructive' : 'secondary'}\r\n+              variant={severity === 'high' ? 'destructive' : 'secondary'}\r\n               className=\"flex items-center space-x-1\"\r\n             >\r\n-              {getSeverityIcon(disease.severity)}\r\n-              <span className=\"capitalize\">{disease.severity}</span>\r\n+              {getSeverityIcon(severity)}\r\n+              <span className=\"capitalize\">{severity}</span>\r\n             </Badge>\r\n           </CardTitle>\r\n         </CardHeader>\r\n         <CardContent className=\"space-y-4\">\r\n           <div>\r\n-            <h3>{disease.name}</h3>\r\n+            <h3>{predictionResult.prediction}</h3>\r\n             <div className=\"mt-2\">\r\n               <div className=\"flex justify-between items-center mb-1\">\r\n                 <span className=\"text-sm text-muted-foreground\">Tingkat Kepercayaan</span>\r\n-                <span>{disease.confidence}%</span>\r\n+                <span>{confidencePercentage}%</span>\r\n               </div>\r\n-              <Progress value={disease.confidence} className=\"w-full\" />\r\n+              <Progress value={parseFloat(confidencePercentage)} className=\"w-full\" />\r\n             </div>\r\n           </div>\r\n \r\n           <div>\r\n             <h4>Deskripsi</h4>\r\n-            <p className=\"text-muted-foreground\">{disease.description}</p>\r\n+            <p className=\"text-muted-foreground\">{diseaseDetails?.description}</p>\r\n           </div>\r\n \r\n           <div>\r\n             <h4>Gejala yang Terdeteksi</h4>\r\n             <ul className=\"list-disc list-inside space-y-1\">\r\n-              {disease.symptoms.map((symptom, index) => (\r\n+              {diseaseDetails?.symptoms.map((symptom, index) => (\r\n                 <li key={index} className=\"text-muted-foreground\">{symptom}</li>\r\n               ))}\r\n             </ul>\r\n           </div>\r\n@@ -114,10 +147,10 @@\n \r\n       <Alert>\r\n         <Info className=\"h-4 w-4\" />\r\n         <AlertDescription>\r\n-          <strong>Rekomendasi Penanganan:</strong> {disease.treatment}\r\n+          <strong>Rekomendasi Penanganan:</strong> {diseaseDetails?.treatment}\r\n         </AlertDescription>\r\n       </Alert>\r\n     </div>\r\n   );\r\n\\ No newline at end of file\n-}\n+}\r\n"
                },
                {
                    "date": 1756219998213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\n import { Badge } from './ui/badge';\r\n import { Progress } from './ui/progress';\r\n import { Alert, AlertDescription } from './ui/alert';\r\n+import { ImageWithFallback } from './figma/ImageWithFallback'; // Tambahkan impor ini\r\n \r\n // Tambahkan definisi tipe untuk hasil dari API\r\n interface PredictionResult {\r\n   prediction: string;\r\n@@ -51,11 +52,12 @@\n \r\n interface ClassificationResultProps {\r\n   predictionResult: PredictionResult | null;\r\n   isLoading: boolean;\r\n+  uploadedImage: string; // ðŸ‘ˆ Tambahkan prop untuk gambar\r\n }\r\n \r\n-export function ClassificationResult({ predictionResult, isLoading }: ClassificationResultProps) {\r\n+export function ClassificationResult({ predictionResult, isLoading, uploadedImage }: ClassificationResultProps) {\r\n   if (isLoading) {\r\n     return (\r\n       <Card>\r\n         <CardHeader>\r\n@@ -73,10 +75,10 @@\n       </Card>\r\n     );\r\n   }\r\n \r\n-  // Gunakan `predictionResult` yang baru\r\n-  if (!predictionResult) {\r\n+  // Gunakan `uploadedImage` untuk menampilkan gambar\r\n+  if (!uploadedImage) {\r\n     return (\r\n       <Card>\r\n         <CardContent className=\"pt-6\">\r\n           <div className=\"text-center text-muted-foreground\">\r\n@@ -88,11 +90,11 @@\n     );\r\n   }\r\n \r\n   // Dapatkan detail penyakit dari data mock berdasarkan hasil prediksi\r\n-  const diseaseDetails = mockDetails[predictionResult.prediction as keyof typeof mockDetails];\r\n-  const severity = predictionResult.confidence >= 0.9 ? 'high' : predictionResult.confidence >= 0.8 ? 'medium' : 'low';\r\n-  const confidencePercentage = (predictionResult.confidence * 100).toFixed(2);\r\n+  const diseaseDetails = predictionResult ? mockDetails[predictionResult.prediction as keyof typeof mockDetails] : null;\r\n+  const severity = predictionResult ? (predictionResult.confidence >= 0.9 ? 'high' : predictionResult.confidence >= 0.8 ? 'medium' : 'low') : 'low';\r\n+  const confidencePercentage = predictionResult ? (predictionResult.confidence * 100).toFixed(2) : '0';\r\n \r\n   const getSeverityIcon = (sev: string) => {\r\n     switch (sev) {\r\n       case 'low': return <CheckCircle className=\"h-4 w-4\" />;\r\n@@ -100,57 +102,76 @@\n       case 'high': return <AlertTriangle className=\"h-4 w-4\" />;\r\n       default: return null;\r\n     }\r\n   };\r\n-\r\n+  \r\n   return (\r\n     <div className=\"space-y-6\">\r\n       <Card>\r\n-        <CardHeader>\r\n-          <CardTitle className=\"flex items-center justify-between\">\r\n-            Hasil Klasifikasi\r\n-            <Badge \r\n-              variant={severity === 'high' ? 'destructive' : 'secondary'}\r\n-              className=\"flex items-center space-x-1\"\r\n-            >\r\n-              {getSeverityIcon(severity)}\r\n-              <span className=\"capitalize\">{severity}</span>\r\n-            </Badge>\r\n-          </CardTitle>\r\n-        </CardHeader>\r\n-        <CardContent className=\"space-y-4\">\r\n-          <div>\r\n-            <h3>{predictionResult.prediction}</h3>\r\n-            <div className=\"mt-2\">\r\n-              <div className=\"flex justify-between items-center mb-1\">\r\n-                <span className=\"text-sm text-muted-foreground\">Tingkat Kepercayaan</span>\r\n-                <span>{confidencePercentage}%</span>\r\n+        <CardContent className=\"p-0\">\r\n+          <div className=\"relative\">\r\n+            <ImageWithFallback\r\n+              src={uploadedImage}\r\n+              alt=\"Uploaded rice plant\"\r\n+              className=\"w-full h-auto object-cover rounded-t-lg\" // Tampilkan gambar\r\n+            />\r\n+          </div>\r\n+          <div className=\"p-6\">\r\n+            <CardHeader className=\"p-0 mb-4\">\r\n+              <CardTitle className=\"flex items-center justify-between\">\r\n+                Hasil Klasifikasi\r\n+                {predictionResult && (\r\n+                  <Badge \r\n+                    variant={severity === 'high' ? 'destructive' : 'secondary'}\r\n+                    className=\"flex items-center space-x-1\"\r\n+                  >\r\n+                    {getSeverityIcon(severity)}\r\n+                    <span className=\"capitalize\">{severity}</span>\r\n+                  </Badge>\r\n+                )}\r\n+              </CardTitle>\r\n+            </CardHeader>\r\n+            <div className=\"space-y-4\">\r\n+              <div>\r\n+                <h3>{predictionResult ? predictionResult.prediction : 'Tidak Diketahui'}</h3>\r\n+                <div className=\"mt-2\">\r\n+                  <div className=\"flex justify-between items-center mb-1\">\r\n+                    <span className=\"text-sm text-muted-foreground\">Tingkat Kepercayaan</span>\r\n+                    <span>{confidencePercentage}%</span>\r\n+                  </div>\r\n+                  <Progress value={parseFloat(confidencePercentage)} className=\"w-full\" />\r\n+                </div>\r\n               </div>\r\n-              <Progress value={parseFloat(confidencePercentage)} className=\"w-full\" />\r\n-            </div>\r\n-          </div>\r\n \r\n-          <div>\r\n-            <h4>Deskripsi</h4>\r\n-            <p className=\"text-muted-foreground\">{diseaseDetails?.description}</p>\r\n-          </div>\r\n+              {diseaseDetails && (\r\n+                <>\r\n+                  <div>\r\n+                    <h4>Deskripsi</h4>\r\n+                    <p className=\"text-muted-foreground\">{diseaseDetails.description}</p>\r\n+                  </div>\r\n \r\n-          <div>\r\n-            <h4>Gejala yang Terdeteksi</h4>\r\n-            <ul className=\"list-disc list-inside space-y-1\">\r\n-              {diseaseDetails?.symptoms.map((symptom, index) => (\r\n-                <li key={index} className=\"text-muted-foreground\">{symptom}</li>\r\n-              ))}\r\n-            </ul>\r\n+                  <div>\r\n+                    <h4>Gejala yang Terdeteksi</h4>\r\n+                    <ul className=\"list-disc list-inside space-y-1\">\r\n+                      {diseaseDetails.symptoms.map((symptom, index) => (\r\n+                        <li key={index} className=\"text-muted-foreground\">{symptom}</li>\r\n+                      ))}\r\n+                    </ul>\r\n+                  </div>\r\n+                </>\r\n+              )}\r\n+            </div>\r\n           </div>\r\n         </CardContent>\r\n       </Card>\r\n \r\n-      <Alert>\r\n-        <Info className=\"h-4 w-4\" />\r\n-        <AlertDescription>\r\n-          <strong>Rekomendasi Penanganan:</strong> {diseaseDetails?.treatment}\r\n-        </AlertDescription>\r\n-      </Alert>\r\n+      {diseaseDetails && (\r\n+        <Alert>\r\n+          <Info className=\"h-4 w-4\" />\r\n+          <AlertDescription>\r\n+            <strong>Rekomendasi Penanganan:</strong> {diseaseDetails.treatment}\r\n+          </AlertDescription>\r\n+        </Alert>\r\n+      )}\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756220026195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n import { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\n import { Badge } from './ui/badge';\r\n import { Progress } from './ui/progress';\r\n import { Alert, AlertDescription } from './ui/alert';\r\n-import { ImageWithFallback } from './figma/ImageWithFallback'; // Tambahkan impor ini\r\n \r\n // Tambahkan definisi tipe untuk hasil dari API\r\n interface PredictionResult {\r\n   prediction: string;\r\n@@ -52,12 +51,11 @@\n \r\n interface ClassificationResultProps {\r\n   predictionResult: PredictionResult | null;\r\n   isLoading: boolean;\r\n-  uploadedImage: string; // ðŸ‘ˆ Tambahkan prop untuk gambar\r\n }\r\n \r\n-export function ClassificationResult({ predictionResult, isLoading, uploadedImage }: ClassificationResultProps) {\r\n+export function ClassificationResult({ predictionResult, isLoading }: ClassificationResultProps) {\r\n   if (isLoading) {\r\n     return (\r\n       <Card>\r\n         <CardHeader>\r\n@@ -75,10 +73,10 @@\n       </Card>\r\n     );\r\n   }\r\n \r\n-  // Gunakan `uploadedImage` untuk menampilkan gambar\r\n-  if (!uploadedImage) {\r\n+  // Gunakan `predictionResult` yang baru\r\n+  if (!predictionResult) {\r\n     return (\r\n       <Card>\r\n         <CardContent className=\"pt-6\">\r\n           <div className=\"text-center text-muted-foreground\">\r\n@@ -90,11 +88,11 @@\n     );\r\n   }\r\n \r\n   // Dapatkan detail penyakit dari data mock berdasarkan hasil prediksi\r\n-  const diseaseDetails = predictionResult ? mockDetails[predictionResult.prediction as keyof typeof mockDetails] : null;\r\n-  const severity = predictionResult ? (predictionResult.confidence >= 0.9 ? 'high' : predictionResult.confidence >= 0.8 ? 'medium' : 'low') : 'low';\r\n-  const confidencePercentage = predictionResult ? (predictionResult.confidence * 100).toFixed(2) : '0';\r\n+  const diseaseDetails = mockDetails[predictionResult.prediction as keyof typeof mockDetails];\r\n+  const severity = predictionResult.confidence >= 0.9 ? 'high' : predictionResult.confidence >= 0.8 ? 'medium' : 'low';\r\n+  const confidencePercentage = (predictionResult.confidence * 100).toFixed(2);\r\n \r\n   const getSeverityIcon = (sev: string) => {\r\n     switch (sev) {\r\n       case 'low': return <CheckCircle className=\"h-4 w-4\" />;\r\n@@ -102,76 +100,57 @@\n       case 'high': return <AlertTriangle className=\"h-4 w-4\" />;\r\n       default: return null;\r\n     }\r\n   };\r\n-  \r\n+\r\n   return (\r\n     <div className=\"space-y-6\">\r\n       <Card>\r\n-        <CardContent className=\"p-0\">\r\n-          <div className=\"relative\">\r\n-            <ImageWithFallback\r\n-              src={uploadedImage}\r\n-              alt=\"Uploaded rice plant\"\r\n-              className=\"w-full h-auto object-cover rounded-t-lg\" // Tampilkan gambar\r\n-            />\r\n+        <CardHeader>\r\n+          <CardTitle className=\"flex items-center justify-between\">\r\n+            Hasil Klasifikasi\r\n+            <Badge \r\n+              variant={severity === 'high' ? 'destructive' : 'secondary'}\r\n+              className=\"flex items-center space-x-1\"\r\n+            >\r\n+              {getSeverityIcon(severity)}\r\n+              <span className=\"capitalize\">{severity}</span>\r\n+            </Badge>\r\n+          </CardTitle>\r\n+        </CardHeader>\r\n+        <CardContent className=\"space-y-4\">\r\n+          <div>\r\n+            <h3>{predictionResult.prediction}</h3>\r\n+            <div className=\"mt-2\">\r\n+              <div className=\"flex justify-between items-center mb-1\">\r\n+                <span className=\"text-sm text-muted-foreground\">Tingkat Kepercayaan</span>\r\n+                <span>{confidencePercentage}%</span>\r\n+              </div>\r\n+              <Progress value={parseFloat(confidencePercentage)} className=\"w-full\" />\r\n+            </div>\r\n           </div>\r\n-          <div className=\"p-6\">\r\n-            <CardHeader className=\"p-0 mb-4\">\r\n-              <CardTitle className=\"flex items-center justify-between\">\r\n-                Hasil Klasifikasi\r\n-                {predictionResult && (\r\n-                  <Badge \r\n-                    variant={severity === 'high' ? 'destructive' : 'secondary'}\r\n-                    className=\"flex items-center space-x-1\"\r\n-                  >\r\n-                    {getSeverityIcon(severity)}\r\n-                    <span className=\"capitalize\">{severity}</span>\r\n-                  </Badge>\r\n-                )}\r\n-              </CardTitle>\r\n-            </CardHeader>\r\n-            <div className=\"space-y-4\">\r\n-              <div>\r\n-                <h3>{predictionResult ? predictionResult.prediction : 'Tidak Diketahui'}</h3>\r\n-                <div className=\"mt-2\">\r\n-                  <div className=\"flex justify-between items-center mb-1\">\r\n-                    <span className=\"text-sm text-muted-foreground\">Tingkat Kepercayaan</span>\r\n-                    <span>{confidencePercentage}%</span>\r\n-                  </div>\r\n-                  <Progress value={parseFloat(confidencePercentage)} className=\"w-full\" />\r\n-                </div>\r\n-              </div>\r\n \r\n-              {diseaseDetails && (\r\n-                <>\r\n-                  <div>\r\n-                    <h4>Deskripsi</h4>\r\n-                    <p className=\"text-muted-foreground\">{diseaseDetails.description}</p>\r\n-                  </div>\r\n+          <div>\r\n+            <h4>Deskripsi</h4>\r\n+            <p className=\"text-muted-foreground\">{diseaseDetails?.description}</p>\r\n+          </div>\r\n\\ No newline at end of file\n \r\n-                  <div>\r\n-                    <h4>Gejala yang Terdeteksi</h4>\r\n-                    <ul className=\"list-disc list-inside space-y-1\">\r\n-                      {diseaseDetails.symptoms.map((symptom, index) => (\r\n-                        <li key={index} className=\"text-muted-foreground\">{symptom}</li>\r\n-                      ))}\r\n-                    </ul>\r\n-                  </div>\r\n-                </>\r\n-              )}\r\n-            </div>\r\n+          <div>\r\n+            <h4>Gejala yang Terdeteksi</h4>\r\n+            <ul className=\"list-disc list-inside space-y-1\">\r\n+              {diseaseDetails?.symptoms.map((symptom, index) => (\r\n+                <li key={index} className=\"text-muted-foreground\">{symptom}</li>\r\n+              ))}\r\n+            </ul>\r\n           </div>\r\n         </CardContent>\r\n       </Card>\r\n \r\n-      {diseaseDetails && (\r\n-        <Alert>\r\n-          <Info className=\"h-4 w-4\" />\r\n-          <AlertDescription>\r\n-            <strong>Rekomendasi Penanganan:</strong> {diseaseDetails.treatment}\r\n-          </AlertDescription>\r\n-        </Alert>\r\n-      )}\r\n+      <Alert>\r\n+        <Info className=\"h-4 w-4\" />\r\n+        <AlertDescription>\r\n+          <strong>Rekomendasi Penanganan:</strong> {diseaseDetails?.treatment}\r\n+        </AlertDescription>\r\n+      </Alert>\r\n     </div>\r\n   );\r\n-}\n+}\r\n"
                },
                {
                    "date": 1756220421873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n       case 'high': return <AlertTriangle className=\"h-4 w-4\" />;\r\n       default: return null;\r\n     }\r\n   };\r\n-\r\n+  \r\n   return (\r\n     <div className=\"space-y-6\">\r\n       <Card>\r\n         <CardHeader>\r\n@@ -127,8 +127,21 @@\n               </div>\r\n               <Progress value={parseFloat(confidencePercentage)} className=\"w-full\" />\r\n             </div>\r\n           </div>\r\n+          \r\n+          {/* Tambahkan bagian untuk menampilkan softmax probabilities */}\r\n+          <div>\r\n+            <h4>Probabilitas Kelas</h4>\r\n+            <ul className=\"text-muted-foreground text-sm space-y-1\">\r\n+              {predictionResult.labels.map((label, index) => (\r\n+                <li key={label}>\r\n+                  <strong>{label}:</strong> {(predictionResult.probabilities[index] * 100).toFixed(2)}%\r\n+                </li>\r\n+              ))}\r\n+            </ul>\r\n+          </div>\r\n+          {/* Akhir dari bagian baru */}\r\n \r\n           <div>\r\n             <h4>Deskripsi</h4>\r\n             <p className=\"text-muted-foreground\">{diseaseDetails?.description}</p>\r\n@@ -152,5 +165,5 @@\n         </AlertDescription>\r\n       </Alert>\r\n     </div>\r\n   );\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1756220590910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,8 @@\n       </Card>\r\n     );\r\n   }\r\n \r\n-  // Gunakan `predictionResult` yang baru\r\n   if (!predictionResult) {\r\n     return (\r\n       <Card>\r\n         <CardContent className=\"pt-6\">\r\n@@ -87,9 +86,8 @@\n       </Card>\r\n     );\r\n   }\r\n \r\n-  // Dapatkan detail penyakit dari data mock berdasarkan hasil prediksi\r\n   const diseaseDetails = mockDetails[predictionResult.prediction as keyof typeof mockDetails];\r\n   const severity = predictionResult.confidence >= 0.9 ? 'high' : predictionResult.confidence >= 0.8 ? 'medium' : 'low';\r\n   const confidencePercentage = (predictionResult.confidence * 100).toFixed(2);\r\n \r\n@@ -116,33 +114,30 @@\n               <span className=\"capitalize\">{severity}</span>\r\n             </Badge>\r\n           </CardTitle>\r\n         </CardHeader>\r\n-        <CardContent className=\"space-y-4\">\r\n-          <div>\r\n+        <CardContent className=\"space-y-6\">\r\n+          <div className=\"space-y-2\">\r\n             <h3>{predictionResult.prediction}</h3>\r\n-            <div className=\"mt-2\">\r\n-              <div className=\"flex justify-between items-center mb-1\">\r\n-                <span className=\"text-sm text-muted-foreground\">Tingkat Kepercayaan</span>\r\n-                <span>{confidencePercentage}%</span>\r\n-              </div>\r\n-              <Progress value={parseFloat(confidencePercentage)} className=\"w-full\" />\r\n+            <div className=\"flex justify-between items-center\">\r\n+              <span className=\"text-sm text-muted-foreground\">Tingkat Kepercayaan</span>\r\n+              <span>{confidencePercentage}%</span>\r\n             </div>\r\n+            <Progress value={parseFloat(confidencePercentage)} className=\"w-full\" />\r\n           </div>\r\n           \r\n-          {/* Tambahkan bagian untuk menampilkan softmax probabilities */}\r\n-          <div>\r\n+          <div className=\"space-y-2\">\r\n             <h4>Probabilitas Kelas</h4>\r\n             <ul className=\"text-muted-foreground text-sm space-y-1\">\r\n               {predictionResult.labels.map((label, index) => (\r\n-                <li key={label}>\r\n-                  <strong>{label}:</strong> {(predictionResult.probabilities[index] * 100).toFixed(2)}%\r\n+                <li key={label} className=\"flex justify-between\">\r\n+                  <strong>{label}:</strong>\r\n+                  <span>{(predictionResult.probabilities[index] * 100).toFixed(2)}%</span>\r\n                 </li>\r\n               ))}\r\n             </ul>\r\n           </div>\r\n-          {/* Akhir dari bagian baru */}\r\n-\r\n+          \r\n           <div>\r\n             <h4>Deskripsi</h4>\r\n             <p className=\"text-muted-foreground\">{diseaseDetails?.description}</p>\r\n           </div>\r\n"
                }
            ],
            "date": 1753252832620,
            "name": "Commit-0",
            "content": "import { AlertTriangle, CheckCircle, Info, Leaf } from 'lucide-react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Badge } from './ui/badge';\r\nimport { Progress } from './ui/progress';\r\nimport { Alert, AlertDescription } from './ui/alert';\r\n\r\ninterface Disease {\r\n  name: string;\r\n  confidence: number;\r\n  severity: 'low' | 'medium' | 'high';\r\n  description: string;\r\n  treatment: string;\r\n  symptoms: string[];\r\n}\r\n\r\ninterface ClassificationResultProps {\r\n  disease: Disease | null;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport function ClassificationResult({ disease, isLoading }: ClassificationResultProps) {\r\n  if (isLoading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Menganalisis Gambar...</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"w-4 h-4 bg-primary rounded-full animate-pulse\"></div>\r\n              <span>Memproses gambar tanaman padi</span>\r\n            </div>\r\n            <Progress value={75} className=\"w-full\" />\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (!disease) {\r\n    return (\r\n      <Card>\r\n        <CardContent className=\"pt-6\">\r\n          <div className=\"text-center text-muted-foreground\">\r\n            <Leaf className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground/50\" />\r\n            <p>Upload gambar untuk memulai klasifikasi penyakit padi</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const getSeverityColor = (severity: string) => {\r\n    switch (severity) {\r\n      case 'low': return 'bg-green-500';\r\n      case 'medium': return 'bg-yellow-500';\r\n      case 'high': return 'bg-red-500';\r\n      default: return 'bg-gray-500';\r\n    }\r\n  };\r\n\r\n  const getSeverityIcon = (severity: string) => {\r\n    switch (severity) {\r\n      case 'low': return <CheckCircle className=\"h-4 w-4\" />;\r\n      case 'medium': return <Info className=\"h-4 w-4\" />;\r\n      case 'high': return <AlertTriangle className=\"h-4 w-4\" />;\r\n      default: return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center justify-between\">\r\n            Hasil Klasifikasi\r\n            <Badge \r\n              variant={disease.severity === 'high' ? 'destructive' : 'secondary'}\r\n              className=\"flex items-center space-x-1\"\r\n            >\r\n              {getSeverityIcon(disease.severity)}\r\n              <span className=\"capitalize\">{disease.severity}</span>\r\n            </Badge>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div>\r\n            <h3>{disease.name}</h3>\r\n            <div className=\"mt-2\">\r\n              <div className=\"flex justify-between items-center mb-1\">\r\n                <span className=\"text-sm text-muted-foreground\">Tingkat Kepercayaan</span>\r\n                <span>{disease.confidence}%</span>\r\n              </div>\r\n              <Progress value={disease.confidence} className=\"w-full\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <h4>Deskripsi</h4>\r\n            <p className=\"text-muted-foreground\">{disease.description}</p>\r\n          </div>\r\n\r\n          <div>\r\n            <h4>Gejala yang Terdeteksi</h4>\r\n            <ul className=\"list-disc list-inside space-y-1\">\r\n              {disease.symptoms.map((symptom, index) => (\r\n                <li key={index} className=\"text-muted-foreground\">{symptom}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Alert>\r\n        <Info className=\"h-4 w-4\" />\r\n        <AlertDescription>\r\n          <strong>Rekomendasi Penanganan:</strong> {disease.treatment}\r\n        </AlertDescription>\r\n      </Alert>\r\n    </div>\r\n  );\r\n}"
        }
    ]
}