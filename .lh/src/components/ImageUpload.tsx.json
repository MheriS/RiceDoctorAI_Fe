{
    "sourceFile": "src/components/ImageUpload.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1753252832620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753762921417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,110 +1,64 @@\n-import { useState, useRef } from 'react';\r\n-import { Upload, Camera, X } from 'lucide-react';\r\n-import { Button } from './ui/button';\r\n+import { useState } from 'react';\r\n+import axios from 'axios';\r\n+import ImageUpload from './ImageUpload';\r\n import { Card } from './ui/card';\r\n-import { ImageWithFallback } from './figma/ImageWithFallback';\r\n+import { Skeleton } from './ui/skeleton';\r\n \r\n-interface ImageUploadProps {\r\n-  onImageUpload: (file: File) => void;\r\n-  uploadedImage?: string;\r\n-  onClear: () => void;\r\n-}\r\n+export default function Home() {\r\n+  const [imageFile, setImageFile] = useState<File | null>(null);\r\n+  const [imagePreview, setImagePreview] = useState<string | undefined>();\r\n+  const [prediction, setPrediction] = useState<number | null>(null);\r\n+  const [loading, setLoading] = useState(false);\r\n \r\n-export function ImageUpload({ onImageUpload, uploadedImage, onClear }: ImageUploadProps) {\r\n-  const [isDragging, setIsDragging] = useState(false);\r\n-  const fileInputRef = useRef<HTMLInputElement>(null);\r\n-\r\n-  const handleDragOver = (e: React.DragEvent) => {\r\n-    e.preventDefault();\r\n-    setIsDragging(true);\r\n+  const handleImageUpload = (file: File) => {\r\n+    setImageFile(file);\r\n+    setImagePreview(URL.createObjectURL(file));\r\n+    setPrediction(null);\r\n+    predict(file);\r\n   };\r\n \r\n-  const handleDragLeave = (e: React.DragEvent) => {\r\n-    e.preventDefault();\r\n-    setIsDragging(false);\r\n+  const handleClear = () => {\r\n+    setImageFile(null);\r\n+    setImagePreview(undefined);\r\n+    setPrediction(null);\r\n   };\r\n \r\n-  const handleDrop = (e: React.DragEvent) => {\r\n-    e.preventDefault();\r\n-    setIsDragging(false);\r\n-    \r\n-    const files = Array.from(e.dataTransfer.files);\r\n-    const imageFile = files.find(file => file.type.startsWith('image/'));\r\n-    \r\n-    if (imageFile) {\r\n-      onImageUpload(imageFile);\r\n-    }\r\n-  };\r\n+  const predict = async (file: File) => {\r\n+    setLoading(true);\r\n+    const formData = new FormData();\r\n+    formData.append('file', file);\r\n \r\n-  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    const file = e.target.files?.[0];\r\n-    if (file) {\r\n-      onImageUpload(file);\r\n+    try {\r\n+      const res = await axios.post('http://localhost:8000/predict', formData);\r\n+      setPrediction(res.data.class);\r\n+    } catch (err) {\r\n+      console.error('Prediction failed:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n     }\r\n   };\r\n \r\n-  const handleClick = () => {\r\n-    fileInputRef.current?.click();\r\n-  };\r\n+  return (\r\n+    <div className=\"max-w-md mx-auto space-y-6 mt-10\">\r\n+      <ImageUpload\r\n+        onImageUpload={handleImageUpload}\r\n+        uploadedImage={imagePreview}\r\n+        onClear={handleClear}\r\n+      />\r\n \r\n-  if (uploadedImage) {\r\n-    return (\r\n-      <Card className=\"relative\">\r\n-        <div className=\"relative\">\r\n-          <ImageWithFallback\r\n-            src={uploadedImage}\r\n-            alt=\"Uploaded rice plant\"\r\n-            className=\"w-full h-64 object-cover rounded-lg\"\r\n-          />\r\n-          <Button\r\n-            variant=\"destructive\"\r\n-            size=\"sm\"\r\n-            className=\"absolute top-2 right-2\"\r\n-            onClick={onClear}\r\n-          >\r\n-            <X className=\"h-4 w-4\" />\r\n-          </Button>\r\n-        </div>\r\n-      </Card>\r\n-    );\r\n-  }\r\n+      {loading && (\r\n+        <Card className=\"p-4 text-center\">\r\n+          <Skeleton className=\"h-6 w-full\" />\r\n+          <p className=\"text-muted-foreground mt-2\">Menganalisis gambar...</p>\r\n\\ No newline at end of file\n+        </Card>\r\n+      )}\r\n \r\n-  return (\r\n-    <Card \r\n-      className={`border-2 border-dashed transition-colors cursor-pointer ${\r\n-        isDragging ? 'border-primary bg-primary/5' : 'border-border'\r\n-      }`}\r\n-      onDragOver={handleDragOver}\r\n-      onDragLeave={handleDragLeave}\r\n-      onDrop={handleDrop}\r\n-      onClick={handleClick}\r\n-    >\r\n-      <div className=\"p-8 text-center\">\r\n-        <div className=\"flex flex-col items-center space-y-4\">\r\n-          <div className=\"p-4 bg-primary/10 rounded-full\">\r\n-            <Upload className=\"h-8 w-8 text-primary\" />\r\n-          </div>\r\n-          <div>\r\n-            <h3>Upload Gambar Tanaman Padi</h3>\r\n-            <p className=\"text-muted-foreground\">\r\n-              Seret gambar ke sini atau klik untuk memilih file\r\n-            </p>\r\n-          </div>\r\n-          <div className=\"flex space-x-2\">\r\n-            <Button variant=\"outline\">\r\n-              <Camera className=\"h-4 w-4 mr-2\" />\r\n-              Pilih File\r\n-            </Button>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-      <input\r\n-        ref={fileInputRef}\r\n-        type=\"file\"\r\n-        accept=\"image/*\"\r\n-        onChange={handleFileSelect}\r\n-        className=\"hidden\"\r\n-      />\r\n-    </Card>\r\n+      {prediction !== null && !loading && (\r\n+        <Card className=\"p-4 text-center\">\r\n+          <h3 className=\"text-lg font-semibold\">Hasil Prediksi</h3>\r\n+          <p className=\"text-2xl mt-2 text-primary\">{`Kelas: ${prediction}`}</p>\r\n+        </Card>\r\n+      )}\r\n+    </div>\r\n   );\r\n-}\n+}\r\n"
                },
                {
                    "date": 1753763350512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,64 +1,110 @@\n-import { useState } from 'react';\r\n-import axios from 'axios';\r\n-import ImageUpload from './ImageUpload';\r\n+import { useState, useRef } from 'react';\r\n+import { Upload, Camera, X } from 'lucide-react';\r\n+import { Button } from './ui/button';\r\n import { Card } from './ui/card';\r\n-import { Skeleton } from './ui/skeleton';\r\n+import { ImageWithFallback } from './figma/ImageWithFallback';\r\n \r\n-export default function Home() {\r\n-  const [imageFile, setImageFile] = useState<File | null>(null);\r\n-  const [imagePreview, setImagePreview] = useState<string | undefined>();\r\n-  const [prediction, setPrediction] = useState<number | null>(null);\r\n-  const [loading, setLoading] = useState(false);\r\n+interface ImageUploadProps {\r\n+  onImageUpload: (file: File) => void;\r\n+  uploadedImage?: string;\r\n+  onClear: () => void;\r\n+}\r\n \r\n-  const handleImageUpload = (file: File) => {\r\n-    setImageFile(file);\r\n-    setImagePreview(URL.createObjectURL(file));\r\n-    setPrediction(null);\r\n-    predict(file);\r\n+export function ImageUpload({ onImageUpload, uploadedImage, onClear }: ImageUploadProps) {\r\n+  const [isDragging, setIsDragging] = useState(false);\r\n+  const fileInputRef = useRef<HTMLInputElement>(null);\r\n+\r\n+  const handleDragOver = (e: React.DragEvent) => {\r\n+    e.preventDefault();\r\n+    setIsDragging(true);\r\n   };\r\n \r\n-  const handleClear = () => {\r\n-    setImageFile(null);\r\n-    setImagePreview(undefined);\r\n-    setPrediction(null);\r\n+  const handleDragLeave = (e: React.DragEvent) => {\r\n+    e.preventDefault();\r\n+    setIsDragging(false);\r\n   };\r\n \r\n-  const predict = async (file: File) => {\r\n-    setLoading(true);\r\n-    const formData = new FormData();\r\n-    formData.append('file', file);\r\n+  const handleDrop = (e: React.DragEvent) => {\r\n+    e.preventDefault();\r\n+    setIsDragging(false);\r\n+    \r\n+    const files = Array.from(e.dataTransfer.files);\r\n+    const imageFile = files.find(file => file.type.startsWith('image/'));\r\n+    \r\n+    if (imageFile) {\r\n+      onImageUpload(imageFile);\r\n+    }\r\n+  };\r\n \r\n-    try {\r\n-      const res = await axios.post('http://localhost:8000/predict', formData);\r\n-      setPrediction(res.data.class);\r\n-    } catch (err) {\r\n-      console.error('Prediction failed:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n+  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const file = e.target.files?.[0];\r\n+    if (file) {\r\n+      onImageUpload(file);\r\n     }\r\n   };\r\n \r\n+  const handleClick = () => {\r\n+    fileInputRef.current?.click();\r\n+  };\r\n+\r\n+  if (uploadedImage) {\r\n+    return (\r\n+      <Card className=\"relative\">\r\n+        <div className=\"relative\">\r\n+          <ImageWithFallback\r\n+            src={uploadedImage}\r\n+            alt=\"Uploaded rice plant\"\r\n+            className=\"w-full h-64 object-cover rounded-lg\"\r\n+          />\r\n+          <Button\r\n+            variant=\"destructive\"\r\n+            size=\"sm\"\r\n+            className=\"absolute top-2 right-2\"\r\n+            onClick={onClear}\r\n+          >\r\n+            <X className=\"h-4 w-4\" />\r\n+          </Button>\r\n+        </div>\r\n+      </Card>\r\n+    );\r\n+  }\r\n+\r\n   return (\r\n-    <div className=\"max-w-md mx-auto space-y-6 mt-10\">\r\n-      <ImageUpload\r\n-        onImageUpload={handleImageUpload}\r\n-        uploadedImage={imagePreview}\r\n-        onClear={handleClear}\r\n+    <Card \r\n+      className={`border-2 border-dashed transition-colors cursor-pointer ${\r\n+        isDragging ? 'border-primary bg-primary/5' : 'border-border'\r\n+      }`}\r\n+      onDragOver={handleDragOver}\r\n+      onDragLeave={handleDragLeave}\r\n+      onDrop={handleDrop}\r\n+      onClick={handleClick}\r\n+    >\r\n+      <div className=\"p-8 text-center\">\r\n+        <div className=\"flex flex-col items-center space-y-4\">\r\n+          <div className=\"p-4 bg-primary/10 rounded-full\">\r\n+            <Upload className=\"h-8 w-8 text-primary\" />\r\n+          </div>\r\n+          <div>\r\n+            <h3>Upload Gambar Tanaman Padi</h3>\r\n+            <p className=\"text-muted-foreground\">\r\n+              Seret gambar ke sini atau klik untuk memilih file\r\n+            </p>\r\n+          </div>\r\n+          <div className=\"flex space-x-2\">\r\n+            <Button variant=\"outline\">\r\n+              <Camera className=\"h-4 w-4 mr-2\" />\r\n+              Pilih File\r\n+            </Button>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+      <input\r\n+        ref={fileInputRef}\r\n+        type=\"file\"\r\n+        accept=\"image/*\"\r\n+        onChange={handleFileSelect}\r\n+        className=\"hidden\"\r\n       />\r\n-\r\n-      {loading && (\r\n-        <Card className=\"p-4 text-center\">\r\n-          <Skeleton className=\"h-6 w-full\" />\r\n-          <p className=\"text-muted-foreground mt-2\">Menganalisis gambar...</p>\r\n-        </Card>\r\n-      )}\r\n-\r\n-      {prediction !== null && !loading && (\r\n-        <Card className=\"p-4 text-center\">\r\n-          <h3 className=\"text-lg font-semibold\">Hasil Prediksi</h3>\r\n-          <p className=\"text-2xl mt-2 text-primary\">{`Kelas: ${prediction}`}</p>\r\n-        </Card>\r\n-      )}\r\n-    </div>\r\n+    </Card>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756218189325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,31 @@\n-import { useState, useRef } from 'react';\r\n+// src/components/ImageUpload.tsx\r\n+\r\n+import React, { useState, useRef } from 'react';\r\n import { Upload, Camera, X } from 'lucide-react';\r\n import { Button } from './ui/button';\r\n import { Card } from './ui/card';\r\n import { ImageWithFallback } from './figma/ImageWithFallback';\r\n \r\n+// Tambahkan definisi tipe untuk respons dari API Flask\r\n+// Ganti dengan tipe data yang benar jika berbeda\r\n+interface PredictionResult {\r\n+  prediction: string;\r\n+  confidence: number;\r\n+  probabilities: number[];\r\n+  labels: string[];\r\n+}\r\n+\r\n interface ImageUploadProps {\r\n   onImageUpload: (file: File) => void;\r\n   uploadedImage?: string;\r\n   onClear: () => void;\r\n }\r\n \r\n export function ImageUpload({ onImageUpload, uploadedImage, onClear }: ImageUploadProps) {\r\n   const [isDragging, setIsDragging] = useState(false);\r\n+  const [isLoading, setIsLoading] = useState(false);\r\n+  const [predictionResult, setPredictionResult] = useState<PredictionResult | null>(null);\r\n   const fileInputRef = useRef<HTMLInputElement>(null);\r\n \r\n   const handleDragOver = (e: React.DragEvent) => {\r\n     e.preventDefault();\r\n@@ -23,31 +36,68 @@\n     e.preventDefault();\r\n     setIsDragging(false);\r\n   };\r\n \r\n-  const handleDrop = (e: React.DragEvent) => {\r\n+  const handleDrop = async (e: React.DragEvent) => { // 👈 Tambahkan 'async'\r\n     e.preventDefault();\r\n     setIsDragging(false);\r\n     \r\n     const files = Array.from(e.dataTransfer.files);\r\n     const imageFile = files.find(file => file.type.startsWith('image/'));\r\n     \r\n     if (imageFile) {\r\n       onImageUpload(imageFile);\r\n+      // Panggil fungsi untuk mengunggah dan memprediksi\r\n+      await uploadAndPredict(imageFile);\r\n     }\r\n   };\r\n \r\n-  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => { // 👈 Tambahkan 'async'\r\n     const file = e.target.files?.[0];\r\n     if (file) {\r\n       onImageUpload(file);\r\n+      // Panggil fungsi untuk mengunggah dan memprediksi\r\n+      await uploadAndPredict(file);\r\n     }\r\n   };\r\n \r\n   const handleClick = () => {\r\n     fileInputRef.current?.click();\r\n   };\r\n \r\n+  // ----------------------------------------------------\r\n+  // FUNGSI BARU UNTUK MENGUNGGAH & MEMPREDIKSI\r\n+  // ----------------------------------------------------\r\n+  const uploadAndPredict = async (file: File) => {\r\n+    setIsLoading(true);\r\n+    setPredictionResult(null); // Hapus hasil prediksi sebelumnya\r\n+\r\n+    const formData = new FormData();\r\n+    // 'image' harus sama dengan nama yang digunakan di Flask (request.files['image'])\r\n+    formData.append('image', file);\r\n+\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:5000/predict_api', {\r\n+        method: 'POST',\r\n+        body: formData,\r\n+      });\r\n+\r\n+      if (!response.ok) {\r\n+        throw new Error(`Permintaan gagal dengan status: ${response.status}`);\r\n+      }\r\n+\r\n+      const data: PredictionResult = await response.json();\r\n+      setPredictionResult(data);\r\n+\r\n+    } catch (error) {\r\n+      console.error('Ada masalah dengan permintaan:', error);\r\n+      alert('Gagal mendapatkan hasil prediksi. Coba lagi.');\r\n+    } finally {\r\n+      setIsLoading(false);\r\n+    }\r\n+  };\r\n+  // ----------------------------------------------------\r\n+\r\n   if (uploadedImage) {\r\n     return (\r\n       <Card className=\"relative\">\r\n         <div className=\"relative\">\r\n@@ -64,8 +114,32 @@\n           >\r\n             <X className=\"h-4 w-4\" />\r\n           </Button>\r\n         </div>\r\n+        \r\n+        {/* Tambahkan bagian untuk menampilkan hasil prediksi */}\r\n+        <div className=\"p-4\">\r\n+          {isLoading ? (\r\n+            <p>Memproses gambar...</p>\r\n+          ) : predictionResult ? (\r\n+            <div>\r\n+              <h3 className=\"font-semibold text-lg\">Hasil Klasifikasi</h3>\r\n+              <p>Penyakit: <strong>{predictionResult.prediction}</strong></p>\r\n+              <p>Kepercayaan: <strong>{(predictionResult.confidence * 100).toFixed(2)}%</strong></p>\r\n+              \r\n+              {/* Tampilkan probabilitas dalam bentuk list atau chart jika diperlukan */}\r\n+              <ul className=\"mt-2 text-sm text-muted-foreground\">\r\n+                {predictionResult.labels.map((label, index) => (\r\n+                  <li key={label}>\r\n+                    {label}: {(predictionResult.probabilities[index] * 100).toFixed(2)}%\r\n+                  </li>\r\n+                ))}\r\n+              </ul>\r\n+            </div>\r\n+          ) : (\r\n+            <p className=\"text-muted-foreground\">Menunggu klasifikasi...</p>\r\n+          )}\r\n+        </div>\r\n       </Card>\r\n     );\r\n   }\r\n \r\n@@ -90,9 +164,9 @@\n               Seret gambar ke sini atau klik untuk memilih file\r\n             </p>\r\n           </div>\r\n           <div className=\"flex space-x-2\">\r\n-            <Button variant=\"outline\">\r\n+            <Button variant=\"outline\" type=\"button\">\r\n               <Camera className=\"h-4 w-4 mr-2\" />\r\n               Pilih File\r\n             </Button>\r\n           </div>\r\n@@ -106,5 +180,5 @@\n         className=\"hidden\"\r\n       />\r\n     </Card>\r\n   );\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1756218456941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,14 +18,15 @@\n interface ImageUploadProps {\r\n   onImageUpload: (file: File) => void;\r\n   uploadedImage?: string;\r\n   onClear: () => void;\r\n+  // Tambahkan prop baru untuk mengirim hasil prediksi ke komponen induk\r\n+  onPredictionResult: (result: PredictionResult) => void;\r\n }\r\n \r\n-export function ImageUpload({ onImageUpload, uploadedImage, onClear }: ImageUploadProps) {\r\n+export function ImageUpload({ onImageUpload, uploadedImage, onClear, onPredictionResult }: ImageUploadProps) {\r\n   const [isDragging, setIsDragging] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  const [predictionResult, setPredictionResult] = useState<PredictionResult | null>(null);\r\n   const fileInputRef = useRef<HTMLInputElement>(null);\r\n \r\n   const handleDragOver = (e: React.DragEvent) => {\r\n     e.preventDefault();\r\n@@ -36,44 +37,37 @@\n     e.preventDefault();\r\n     setIsDragging(false);\r\n   };\r\n \r\n-  const handleDrop = async (e: React.DragEvent) => { // 👈 Tambahkan 'async'\r\n+  const handleDrop = async (e: React.DragEvent) => {\r\n     e.preventDefault();\r\n     setIsDragging(false);\r\n     \r\n     const files = Array.from(e.dataTransfer.files);\r\n     const imageFile = files.find(file => file.type.startsWith('image/'));\r\n     \r\n     if (imageFile) {\r\n       onImageUpload(imageFile);\r\n-      // Panggil fungsi untuk mengunggah dan memprediksi\r\n       await uploadAndPredict(imageFile);\r\n     }\r\n   };\r\n \r\n-  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => { // 👈 Tambahkan 'async'\r\n+  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     const file = e.target.files?.[0];\r\n     if (file) {\r\n       onImageUpload(file);\r\n-      // Panggil fungsi untuk mengunggah dan memprediksi\r\n       await uploadAndPredict(file);\r\n     }\r\n   };\r\n \r\n   const handleClick = () => {\r\n     fileInputRef.current?.click();\r\n   };\r\n \r\n-  // ----------------------------------------------------\r\n-  // FUNGSI BARU UNTUK MENGUNGGAH & MEMPREDIKSI\r\n-  // ----------------------------------------------------\r\n   const uploadAndPredict = async (file: File) => {\r\n     setIsLoading(true);\r\n-    setPredictionResult(null); // Hapus hasil prediksi sebelumnya\r\n \r\n     const formData = new FormData();\r\n-    // 'image' harus sama dengan nama yang digunakan di Flask (request.files['image'])\r\n     formData.append('image', file);\r\n \r\n     try {\r\n       const response = await fetch('http://127.0.0.1:5000/predict_api', {\r\n@@ -85,18 +79,16 @@\n         throw new Error(`Permintaan gagal dengan status: ${response.status}`);\r\n       }\r\n \r\n       const data: PredictionResult = await response.json();\r\n-      setPredictionResult(data);\r\n-\r\n+      onPredictionResult(data); // 👈 Kirim hasil ke komponen induk\r\n     } catch (error) {\r\n       console.error('Ada masalah dengan permintaan:', error);\r\n-      alert('Gagal mendapatkan hasil prediksi. Coba lagi.');\r\n+      // Tampilkan notifikasi error di komponen induk\r\n     } finally {\r\n       setIsLoading(false);\r\n     }\r\n   };\r\n-  // ----------------------------------------------------\r\n \r\n   if (uploadedImage) {\r\n     return (\r\n       <Card className=\"relative\">\r\n@@ -115,30 +107,11 @@\n             <X className=\"h-4 w-4\" />\r\n           </Button>\r\n         </div>\r\n         \r\n-        {/* Tambahkan bagian untuk menampilkan hasil prediksi */}\r\n-        <div className=\"p-4\">\r\n-          {isLoading ? (\r\n-            <p>Memproses gambar...</p>\r\n-          ) : predictionResult ? (\r\n-            <div>\r\n-              <h3 className=\"font-semibold text-lg\">Hasil Klasifikasi</h3>\r\n-              <p>Penyakit: <strong>{predictionResult.prediction}</strong></p>\r\n-              <p>Kepercayaan: <strong>{(predictionResult.confidence * 100).toFixed(2)}%</strong></p>\r\n-              \r\n-              {/* Tampilkan probabilitas dalam bentuk list atau chart jika diperlukan */}\r\n-              <ul className=\"mt-2 text-sm text-muted-foreground\">\r\n-                {predictionResult.labels.map((label, index) => (\r\n-                  <li key={label}>\r\n-                    {label}: {(predictionResult.probabilities[index] * 100).toFixed(2)}%\r\n-                  </li>\r\n-                ))}\r\n-              </ul>\r\n-            </div>\r\n-          ) : (\r\n-            <p className=\"text-muted-foreground\">Menunggu klasifikasi...</p>\r\n-          )}\r\n+        {/* Hapus bagian ini karena akan ditampilkan di komponen induk */}\r\n+        <div className=\"p-4 text-center\">\r\n+          {isLoading && <p className=\"text-muted-foreground\">Memproses gambar...</p>}\r\n         </div>\r\n       </Card>\r\n     );\r\n   }\r\n@@ -180,5 +153,5 @@\n         className=\"hidden\"\r\n       />\r\n     </Card>\r\n   );\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756218694170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,15 +18,14 @@\n interface ImageUploadProps {\r\n   onImageUpload: (file: File) => void;\r\n   uploadedImage?: string;\r\n   onClear: () => void;\r\n-  // Tambahkan prop baru untuk mengirim hasil prediksi ke komponen induk\r\n-  onPredictionResult: (result: PredictionResult) => void;\r\n }\r\n \r\n-export function ImageUpload({ onImageUpload, uploadedImage, onClear, onPredictionResult }: ImageUploadProps) {\r\n+export function ImageUpload({ onImageUpload, uploadedImage, onClear }: ImageUploadProps) {\r\n   const [isDragging, setIsDragging] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n+  const [predictionResult, setPredictionResult] = useState<PredictionResult | null>(null);\r\n   const fileInputRef = useRef<HTMLInputElement>(null);\r\n \r\n   const handleDragOver = (e: React.DragEvent) => {\r\n     e.preventDefault();\r\n@@ -37,37 +36,44 @@\n     e.preventDefault();\r\n     setIsDragging(false);\r\n   };\r\n \r\n-  const handleDrop = async (e: React.DragEvent) => {\r\n+  const handleDrop = async (e: React.DragEvent) => { // 👈 Tambahkan 'async'\r\n     e.preventDefault();\r\n     setIsDragging(false);\r\n     \r\n     const files = Array.from(e.dataTransfer.files);\r\n     const imageFile = files.find(file => file.type.startsWith('image/'));\r\n     \r\n     if (imageFile) {\r\n       onImageUpload(imageFile);\r\n+      // Panggil fungsi untuk mengunggah dan memprediksi\r\n       await uploadAndPredict(imageFile);\r\n     }\r\n   };\r\n \r\n-  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => { // 👈 Tambahkan 'async'\r\n     const file = e.target.files?.[0];\r\n     if (file) {\r\n       onImageUpload(file);\r\n+      // Panggil fungsi untuk mengunggah dan memprediksi\r\n       await uploadAndPredict(file);\r\n     }\r\n   };\r\n \r\n   const handleClick = () => {\r\n     fileInputRef.current?.click();\r\n   };\r\n \r\n+  // ----------------------------------------------------\r\n+  // FUNGSI BARU UNTUK MENGUNGGAH & MEMPREDIKSI\r\n+  // ----------------------------------------------------\r\n   const uploadAndPredict = async (file: File) => {\r\n     setIsLoading(true);\r\n+    setPredictionResult(null); // Hapus hasil prediksi sebelumnya\r\n \r\n     const formData = new FormData();\r\n+    // 'image' harus sama dengan nama yang digunakan di Flask (request.files['image'])\r\n     formData.append('image', file);\r\n \r\n     try {\r\n       const response = await fetch('http://127.0.0.1:5000/predict_api', {\r\n@@ -79,16 +85,18 @@\n         throw new Error(`Permintaan gagal dengan status: ${response.status}`);\r\n       }\r\n \r\n       const data: PredictionResult = await response.json();\r\n-      onPredictionResult(data); // 👈 Kirim hasil ke komponen induk\r\n+      setPredictionResult(data);\r\n+\r\n     } catch (error) {\r\n       console.error('Ada masalah dengan permintaan:', error);\r\n-      // Tampilkan notifikasi error di komponen induk\r\n+      alert('Gagal mendapatkan hasil prediksi. Coba lagi.');\r\n     } finally {\r\n       setIsLoading(false);\r\n     }\r\n   };\r\n+  // ----------------------------------------------------\r\n \r\n   if (uploadedImage) {\r\n     return (\r\n       <Card className=\"relative\">\r\n@@ -107,11 +115,30 @@\n             <X className=\"h-4 w-4\" />\r\n           </Button>\r\n         </div>\r\n         \r\n-        {/* Hapus bagian ini karena akan ditampilkan di komponen induk */}\r\n-        <div className=\"p-4 text-center\">\r\n-          {isLoading && <p className=\"text-muted-foreground\">Memproses gambar...</p>}\r\n+        {/* Tambahkan bagian untuk menampilkan hasil prediksi */}\r\n+        <div className=\"p-4\">\r\n+          {isLoading ? (\r\n+            <p>Memproses gambar...</p>\r\n+          ) : predictionResult ? (\r\n+            <div>\r\n+              <h3 className=\"font-semibold text-lg\">Hasil Klasifikasi</h3>\r\n+              <p>Penyakit: <strong>{predictionResult.prediction}</strong></p>\r\n+              <p>Kepercayaan: <strong>{(predictionResult.confidence * 100).toFixed(2)}%</strong></p>\r\n+              \r\n+              {/* Tampilkan probabilitas dalam bentuk list atau chart jika diperlukan */}\r\n+              <ul className=\"mt-2 text-sm text-muted-foreground\">\r\n+                {predictionResult.labels.map((label, index) => (\r\n+                  <li key={label}>\r\n+                    {label}: {(predictionResult.probabilities[index] * 100).toFixed(2)}%\r\n+                  </li>\r\n+                ))}\r\n+              </ul>\r\n+            </div>\r\n+          ) : (\r\n+            <p className=\"text-muted-foreground\">Menunggu klasifikasi...</p>\r\n+          )}\r\n         </div>\r\n       </Card>\r\n     );\r\n   }\r\n@@ -153,5 +180,5 @@\n         className=\"hidden\"\r\n       />\r\n     </Card>\r\n   );\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1756219524542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,14 +18,15 @@\n interface ImageUploadProps {\r\n   onImageUpload: (file: File) => void;\r\n   uploadedImage?: string;\r\n   onClear: () => void;\r\n+  // Tambahkan prop baru untuk mengirim hasil prediksi ke komponen induk\r\n+  onPredictionResult: (result: PredictionResult) => void;\r\n }\r\n \r\n-export function ImageUpload({ onImageUpload, uploadedImage, onClear }: ImageUploadProps) {\r\n+export function ImageUpload({ onImageUpload, uploadedImage, onClear, onPredictionResult }: ImageUploadProps) {\r\n   const [isDragging, setIsDragging] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  const [predictionResult, setPredictionResult] = useState<PredictionResult | null>(null);\r\n   const fileInputRef = useRef<HTMLInputElement>(null);\r\n \r\n   const handleDragOver = (e: React.DragEvent) => {\r\n     e.preventDefault();\r\n@@ -68,9 +69,8 @@\n   // FUNGSI BARU UNTUK MENGUNGGAH & MEMPREDIKSI\r\n   // ----------------------------------------------------\r\n   const uploadAndPredict = async (file: File) => {\r\n     setIsLoading(true);\r\n-    setPredictionResult(null); // Hapus hasil prediksi sebelumnya\r\n \r\n     const formData = new FormData();\r\n     // 'image' harus sama dengan nama yang digunakan di Flask (request.files['image'])\r\n     formData.append('image', file);\r\n@@ -85,9 +85,9 @@\n         throw new Error(`Permintaan gagal dengan status: ${response.status}`);\r\n       }\r\n \r\n       const data: PredictionResult = await response.json();\r\n-      setPredictionResult(data);\r\n+      onPredictionResult(data); // 👈 Kirim hasil ke komponen induk\r\n \r\n     } catch (error) {\r\n       console.error('Ada masalah dengan permintaan:', error);\r\n       alert('Gagal mendapatkan hasil prediksi. Coba lagi.');\r\n@@ -115,30 +115,11 @@\n             <X className=\"h-4 w-4\" />\r\n           </Button>\r\n         </div>\r\n         \r\n-        {/* Tambahkan bagian untuk menampilkan hasil prediksi */}\r\n-        <div className=\"p-4\">\r\n-          {isLoading ? (\r\n-            <p>Memproses gambar...</p>\r\n-          ) : predictionResult ? (\r\n-            <div>\r\n-              <h3 className=\"font-semibold text-lg\">Hasil Klasifikasi</h3>\r\n-              <p>Penyakit: <strong>{predictionResult.prediction}</strong></p>\r\n-              <p>Kepercayaan: <strong>{(predictionResult.confidence * 100).toFixed(2)}%</strong></p>\r\n-              \r\n-              {/* Tampilkan probabilitas dalam bentuk list atau chart jika diperlukan */}\r\n-              <ul className=\"mt-2 text-sm text-muted-foreground\">\r\n-                {predictionResult.labels.map((label, index) => (\r\n-                  <li key={label}>\r\n-                    {label}: {(predictionResult.probabilities[index] * 100).toFixed(2)}%\r\n-                  </li>\r\n-                ))}\r\n-              </ul>\r\n-            </div>\r\n-          ) : (\r\n-            <p className=\"text-muted-foreground\">Menunggu klasifikasi...</p>\r\n-          )}\r\n+        {/* Hapus bagian ini karena akan ditampilkan di komponen induk */}\r\n+        <div className=\"p-4 text-center\">\r\n+          {isLoading && <p className=\"text-muted-foreground\">Memproses gambar...</p>}\r\n         </div>\r\n       </Card>\r\n     );\r\n   }\r\n@@ -180,5 +161,5 @@\n         className=\"hidden\"\r\n       />\r\n     </Card>\r\n   );\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756220214574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import React, { useState, useRef } from 'react';\r\n import { Upload, Camera, X } from 'lucide-react';\r\n import { Button } from './ui/button';\r\n import { Card } from './ui/card';\r\n-import { ImageWithFallback } from './figma/ImageWithFallback';\r\n+import { ImageWithFallback } from './figma/ImageWithFallback'; // Tetap gunakan ini\r\n \r\n // Tambahkan definisi tipe untuk respons dari API Flask\r\n // Ganti dengan tipe data yang benar jika berbeda\r\n interface PredictionResult {\r\n@@ -98,14 +98,15 @@\n   // ----------------------------------------------------\r\n \r\n   if (uploadedImage) {\r\n     return (\r\n-      <Card className=\"relative\">\r\n-        <div className=\"relative\">\r\n+      <Card className=\"relative overflow-hidden\"> {/* 👈 Tambahkan overflow-hidden */}\r\n+        <div className=\"relative w-full h-auto\"> {/* 👈 Sesuaikan ukuran div */}\r\n           <ImageWithFallback\r\n             src={uploadedImage}\r\n             alt=\"Uploaded rice plant\"\r\n-            className=\"w-full h-64 object-cover rounded-lg\"\r\n+            // Ubah class menjadi object-cover untuk mengisi frame\r\n+            className=\"w-full h-full object-cover rounded-lg\"\r\n           />\r\n           <Button\r\n             variant=\"destructive\"\r\n             size=\"sm\"\r\n@@ -161,5 +162,5 @@\n         className=\"hidden\"\r\n       />\r\n     </Card>\r\n   );\r\n-}\n\\ No newline at end of file\n+}\r\n"
                }
            ],
            "date": 1753252832620,
            "name": "Commit-0",
            "content": "import { useState, useRef } from 'react';\r\nimport { Upload, Camera, X } from 'lucide-react';\r\nimport { Button } from './ui/button';\r\nimport { Card } from './ui/card';\r\nimport { ImageWithFallback } from './figma/ImageWithFallback';\r\n\r\ninterface ImageUploadProps {\r\n  onImageUpload: (file: File) => void;\r\n  uploadedImage?: string;\r\n  onClear: () => void;\r\n}\r\n\r\nexport function ImageUpload({ onImageUpload, uploadedImage, onClear }: ImageUploadProps) {\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragging(true);\r\n  };\r\n\r\n  const handleDragLeave = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragging(false);\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragging(false);\r\n    \r\n    const files = Array.from(e.dataTransfer.files);\r\n    const imageFile = files.find(file => file.type.startsWith('image/'));\r\n    \r\n    if (imageFile) {\r\n      onImageUpload(imageFile);\r\n    }\r\n  };\r\n\r\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (file) {\r\n      onImageUpload(file);\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    fileInputRef.current?.click();\r\n  };\r\n\r\n  if (uploadedImage) {\r\n    return (\r\n      <Card className=\"relative\">\r\n        <div className=\"relative\">\r\n          <ImageWithFallback\r\n            src={uploadedImage}\r\n            alt=\"Uploaded rice plant\"\r\n            className=\"w-full h-64 object-cover rounded-lg\"\r\n          />\r\n          <Button\r\n            variant=\"destructive\"\r\n            size=\"sm\"\r\n            className=\"absolute top-2 right-2\"\r\n            onClick={onClear}\r\n          >\r\n            <X className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card \r\n      className={`border-2 border-dashed transition-colors cursor-pointer ${\r\n        isDragging ? 'border-primary bg-primary/5' : 'border-border'\r\n      }`}\r\n      onDragOver={handleDragOver}\r\n      onDragLeave={handleDragLeave}\r\n      onDrop={handleDrop}\r\n      onClick={handleClick}\r\n    >\r\n      <div className=\"p-8 text-center\">\r\n        <div className=\"flex flex-col items-center space-y-4\">\r\n          <div className=\"p-4 bg-primary/10 rounded-full\">\r\n            <Upload className=\"h-8 w-8 text-primary\" />\r\n          </div>\r\n          <div>\r\n            <h3>Upload Gambar Tanaman Padi</h3>\r\n            <p className=\"text-muted-foreground\">\r\n              Seret gambar ke sini atau klik untuk memilih file\r\n            </p>\r\n          </div>\r\n          <div className=\"flex space-x-2\">\r\n            <Button variant=\"outline\">\r\n              <Camera className=\"h-4 w-4 mr-2\" />\r\n              Pilih File\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <input\r\n        ref={fileInputRef}\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={handleFileSelect}\r\n        className=\"hidden\"\r\n      />\r\n    </Card>\r\n  );\r\n}"
        }
    ]
}